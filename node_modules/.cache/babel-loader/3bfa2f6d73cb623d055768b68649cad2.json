{"ast":null,"code":"var _jsxFileName = \"D:\\\\Speed Tech\\\\Ofer\\\\Recat\\\\react-app\\\\src\\\\tods_comps\\\\toDoItem.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport \"../css_comps/todos.css\";\nimport Moment from 'moment';\nimport { doApiGet, doApiPost } from '../services/apiService';\n\nfunction ToDoItem(props) {\n  let userInput = useRef(null);\n  let dateFormat = Moment(new Date()).format('DD/MM/YYYY');\n  let [items, setItem] = useState(props.cardTodo.items);\n  let dispatch = useDispatch();\n\n  const addTask = async () => {\n    let url = `http://localhost:3000/todos/${props.cardTodo._id}/addItem/`;\n    let body = {\n      item_name: userInput.current.value\n    };\n    doApiPost(url, body).then(() => {\n      let url = \"http://localhost:3000/todos\";\n      doApiGet(url).then(data => {\n        console.log(\"data for DB\", data);\n        dispatch({\n          type: \"updateList\",\n          data: data\n        });\n      });\n    });\n    userInput.current.value = \"\"; // if (userInput.current.value === \"\") {\n    //   alert(\"Please item name\");\n    // }\n    // else {\n    //   let tempItem = {\n    //     indexCard: props.indexCard,\n    //     id: Math.random((300 * 39) * 10).toFixed(2),\n    //     item_name: userInput.\n    //     indexcurrent.value,\n    //     created_at: dateFormat,\n    //     completed: false\n    //   }\n    //   dispatch({ type:\"addItem\", ItemBody: tempItem })\n    //   console.log(\"items123->\", items);\n    //   userInput.current.value = \"\";\n    // }\n  };\n\n  const checkedItem = (_val, _i) => {\n    let url = `http://localhost:3000/todos/${props.cardTodo._id}/updateStatus/${props.cardTodo.items[_i]._id}`;\n    let body = {\n      completed: !_val\n    };\n    console.log(url);\n    doApiPost(url, body).then(data => {\n      let url = \"http://localhost:3000/todos\";\n      doApiGet(url).then(data => {\n        console.log(\"data for DB\", data);\n        dispatch({\n          type: \"updateList\",\n          data: data\n        });\n      });\n    });\n  }; // const checkedItem = (val) => {\n  //   items[val].completed = !items[val].completed;\n  //   let obj = {\n  //     item: items,\n  //     indexCard: props.indexCard\n  //   }\n  //   dispatch({ type: \"changeCompleted\", itemChack: obj })\n  // }\n\n\n  const deleteItem = () => {\n    let url = `http://localhost:3000/todos/${props.cardTodo._id}/deleteItem/${props.cardTodo.items._id}`;\n    doApiPost(url).then(data => {\n      console.log(data);\n      let url = \"http://localhost:3000/todos\";\n      doApiGet(url).then(data => {\n        console.log(\"data for DB\", data);\n        dispatch({\n          type: \"updateList\",\n          data: data\n        });\n      });\n    });\n  }; // const delTask = (itemId) => {\n  //   let obj = {\n  //     itemId: itemId,\n  //     indexCard: props.indexCard\n  //   }\n  //   dispatch({ type: \"delTask\", itemDelete: obj })\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-2 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"display-4 text-center text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, props.cardTodo.todo_name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex align-items-center justify-content-center inputItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: userInput,\n    type: \"text\",\n    className: \"form-control  border border-info \",\n    placeholder: \"I have to...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addTask,\n    className: \"btn btn-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Add\")), items.map((val, i) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: i,\n      className: \"d-flex justify-content-between align-items-center p-2 mt-1 items \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: val.id,\n      type: \"checkbox\",\n      name: \"isDone\",\n      onClick: () => {\n        checkedItem(val.completed, i);\n      },\n      className: \"mr-1\",\n      checked: val.completed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: val.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, val.item_name)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, val.created_at), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        deleteItem();\n      },\n      className: \"btn btn-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \"X\"));\n  }));\n}\n\nexport default ToDoItem;","map":{"version":3,"sources":["D:/Speed Tech/Ofer/Recat/react-app/src/tods_comps/toDoItem.js"],"names":["React","useEffect","useRef","useState","useDispatch","Moment","doApiGet","doApiPost","ToDoItem","props","userInput","dateFormat","Date","format","items","setItem","cardTodo","dispatch","addTask","url","_id","body","item_name","current","value","then","data","console","log","type","checkedItem","_val","_i","completed","deleteItem","todo_name","map","val","i","id","created_at"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport \"../css_comps/todos.css\"\r\nimport Moment from 'moment';\r\nimport { doApiGet, doApiPost } from '../services/apiService';\r\nfunction ToDoItem(props) {\r\n  let userInput = useRef(null);\r\n  let dateFormat = Moment(new Date()).format('DD/MM/YYYY');\r\n  let [items, setItem] = useState(props.cardTodo.items)\r\n  \r\n\r\n  let dispatch = useDispatch();\r\n  const addTask = async () => {\r\n\r\n    let url = `http://localhost:3000/todos/${props.cardTodo._id}/addItem/`\r\n    let body = {\r\n      item_name: userInput.current.value\r\n    }\r\n\r\n    doApiPost(url, body)\r\n      .then(() => {\r\n        let url = \"http://localhost:3000/todos\";\r\n        doApiGet(url)\r\n          .then(data => {\r\n            console.log(\"data for DB\", data);\r\n            dispatch({ type: \"updateList\", data: data })\r\n          });\r\n      })\r\n    userInput.current.value = \"\";\r\n\r\n\r\n    // if (userInput.current.value === \"\") {\r\n    //   alert(\"Please item name\");\r\n\r\n    // }\r\n    // else {\r\n    //   let tempItem = {\r\n    //     indexCard: props.indexCard,\r\n    //     id: Math.random((300 * 39) * 10).toFixed(2),\r\n    //     item_name: userInput.\r\n    //     indexcurrent.value,\r\n    //     created_at: dateFormat,\r\n    //     completed: false\r\n    //   }\r\n\r\n    //   dispatch({ type:\"addItem\", ItemBody: tempItem })\r\n    //   console.log(\"items123->\", items);\r\n    //   userInput.current.value = \"\";\r\n    // }\r\n  }\r\n\r\n  const checkedItem = (_val,_i) => {\r\n    let url =`http://localhost:3000/todos/${props.cardTodo._id}/updateStatus/${props.cardTodo.items[_i]._id}`;\r\n    let body = {\r\n      completed: !_val\r\n  }\r\n  console.log(url);\r\n\r\n  doApiPost(url,body)\r\n  .then(data=>{\r\n    let url = \"http://localhost:3000/todos\";\r\n\r\n    doApiGet(url)\r\n      .then(data => {\r\n        console.log(\"data for DB\", data);\r\n        dispatch({ type: \"updateList\", data: data })\r\n      });\r\n\r\n  })\r\n\r\n  }\r\n  // const checkedItem = (val) => {\r\n  //   items[val].completed = !items[val].completed;\r\n  //   let obj = {\r\n  //     item: items,\r\n  //     indexCard: props.indexCard\r\n  //   }\r\n  //   dispatch({ type: \"changeCompleted\", itemChack: obj })\r\n\r\n  // }\r\n\r\n\r\n  const deleteItem = () => {\r\n    let url = `http://localhost:3000/todos/${props.cardTodo._id}/deleteItem/${props.cardTodo.items._id}`;\r\n    doApiPost(url)\r\n      .then(data => {\r\n        console.log(data);\r\n        let url = \"http://localhost:3000/todos\";\r\n        doApiGet(url)\r\n          .then(data => {\r\n            console.log(\"data for DB\", data);\r\n            dispatch({ type: \"updateList\", data: data })\r\n          });\r\n\r\n      })\r\n  \r\n  }\r\n\r\n  // const delTask = (itemId) => {\r\n  //   let obj = {\r\n  //     itemId: itemId,\r\n  //     indexCard: props.indexCard\r\n  //   }\r\n  //   dispatch({ type: \"delTask\", itemDelete: obj })\r\n\r\n  // }\r\n\r\n  return (\r\n    <div className=\"p-2 \">\r\n      <h1 className=\"display-4 text-center text-white\" >{props.cardTodo.todo_name}</h1>\r\n      <div className=\"d-flex align-items-center justify-content-center inputItem\">\r\n        <input ref={userInput} type=\"text\" className=\"form-control  border border-info \" placeholder=\"I have to...\" />\r\n        <button onClick={addTask} className=\"btn btn-info\">Add</button>\r\n      </div>\r\n      {items.map((val, i) => {\r\n        return (\r\n          <div key={i} className=\"d-flex justify-content-between align-items-center p-2 mt-1 items \">\r\n            <div>\r\n              <input id={val.id} type=\"checkbox\" name=\"isDone\" onClick={() => {\r\n                checkedItem(val.completed,i)\r\n              }} className=\"mr-1\" checked={val.completed} />\r\n              <label htmlFor={val.id}>{val.item_name}</label>\r\n            </div>\r\n            <div>{val.created_at}</div>\r\n            <button onClick={() => { deleteItem() }} className=\"btn btn-danger\">X</button>\r\n            {/* <button onClick={() => { delTask(i) }} className=\"btn btn-danger\">X</button> */}\r\n\r\n          </div>)\r\n\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoItem\r\n\r\n"]},"metadata":{},"sourceType":"module"}