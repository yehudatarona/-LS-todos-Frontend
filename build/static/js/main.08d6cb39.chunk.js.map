{"version":3,"sources":["services/apiService.js","tods_comps/todoTitle.js","tods_comps/nav.js","tods_comps/toDoItem.js","tods_comps/todoCrad.js","tods_comps/toDoList.js","reducer/toDoReducer.js","tods_comps/header.js","tods_comps/appTodos.js","App.js","serviceWorker.js","index.js"],"names":["doApiGet","_url","a","fetch","resp","json","data","doApiPost","_body","method","body","JSON","stringify","headers","console","log","TodoTitle","props","todoName","useRef","history","useHistory","dispatch","useDispatch","className","ref","type","placeholder","onClick","current","value","alert","todo_name","then","push","Nav","to","ToDoItem","userInput","items","cardTodo","addTask","url","_id","item_name","todosList","map","val","itemIndex","key","id","name","onChange","_val","_itemIndex","completed","checkedItem","checked","htmlFor","created_at","deleteItem","TodoCard","indexCard","ToDoList","todosList_ar","useSelector","myStore","dTodoList_ar","useEffect","index","initState","toDoReducer","state","action","Header","AppTodos","createStore","store","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08d6cb39.chunk.js","sourcesContent":["let localUrl = \"http://localhost:3000/\";\r\nlet realUrl = \"https://marketcor.herokuapp.com/\"\r\nexport const apiUrl = localUrl;\r\n\r\nexport let perPage = 4;\r\n\r\nexport const doApiGet = async (_url) => {\r\n    let resp = await fetch(_url);\r\n    let data = await resp.json();\r\n    //console.log(\"doApiGst\",data);\r\n    return data;\r\n}\r\n\r\nexport const doApiPost = async (_url, _body) => {\r\n    let resp = await fetch(_url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(_body),\r\n        headers: {\r\n            'content-type': \"application/json\"\r\n        }\r\n    })\r\n    let data = await resp.json()\r\n    console.log(\"service say:\" ,data)\r\n    return data;\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"../css_comps/todos.css\";\r\nimport { doApiGet, doApiPost } from '../services/apiService';\r\nfunction TodoTitle(props) {\r\n\r\n  let todoName = useRef(null);\r\n  let history = useHistory();\r\n  let dispatch = useDispatch()\r\n\r\n  const addTodo = () => {\r\n    if (todoName.current.value === \"\") {\r\n      alert(\"Please enter todo name\");\r\n    }\r\n    else {\r\n      // let url = `http://localhost:3000/todos/createTodo`;\r\n      let url = `https://ls-task-todos.herokuapp.com/todos/createTodo`;\r\n      let body = {\r\n        todo_name: todoName.current.value\r\n\r\n      }\r\n      doApiPost(url, body)\r\n        .then(data => {\r\n          let url = \"https://ls-task-todos.herokuapp.com/todos\";\r\n          doApiGet(url)\r\n            .then(data => {\r\n              console.log(\"data for DB\", data);\r\n              dispatch({ type: \"updateList\", data: data })\r\n              todoName.current.value = \"\";\r\n              history.push(\"/\");\r\n            });\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container text-center\">\r\n      <h1 className=\"display-4 text-info mt-5\" >Named your todo note title</h1>\r\n      <div className=\"d-flex align-items-center justify-content-center mt-4 todoTitle\">\r\n        <input ref={todoName} type=\"text\" className=\"form-control w-50 p-4 border border-info todoTitle\" placeholder=\"Please enter todo name...\" />\r\n        <button onClick={addTodo} className=\"btn-lg btn-primary\">Apply</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoTitle\r\n","import React from 'react';\r\nimport { Link} from \"react-router-dom\"\r\nimport \"../css_comps/todos.css\"\r\nfunction Nav(props) {\r\n    return (\r\n        <nav className=\"bg-dark\">\r\n            <div className=\"d-flex align-items-center justify-content-between\">\r\n                <Link to={\"/\"} className=\"text-decoration-none\">Home</Link>\r\n                <Link to={\"/newTodo/\"} className=\"text-decoration-non\">Create Todo</Link>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Nav\r\n","import React, { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport \"../css_comps/todos.css\"\r\nimport { doApiGet, doApiPost } from '../services/apiService';\r\nfunction ToDoItem(props) {\r\n\r\n  let userInput = useRef(null);\r\n  let items = props.cardTodo.items\r\n  let dispatch = useDispatch();\r\n\r\n  const addTask = async () => {\r\n    if (userInput.current.value === \"\") {\r\n      alert(\"Please item name\");\r\n    }\r\n    else {\r\n      // let url = `http://localhost:3000/todos/${props.cardTodo._id}/addItem/`\r\n      let url = `https://ls-task-todos.herokuapp.com/todos/${props.cardTodo._id}/addItem/`\r\n      let body = {\r\n        item_name: userInput.current.value\r\n      }\r\n\r\n      doApiPost(url, body)\r\n        .then(() => {\r\n         \r\n          props.todosList();\r\n        })\r\n      userInput.current.value = \"\";\r\n\r\n    }\r\n  }\r\n\r\n  const checkedItem = (_val, _itemIndex) => {\r\n    // let url = `http://localhost:3000/todos/${props.cardTodo._id}/updateStatus/${props.cardTodo.items[_itemIndex]._id}`;\r\n    let url = `https://ls-task-todos.herokuapp.com/todos/${props.cardTodo._id}/updateStatus/${props.cardTodo.items[_itemIndex]._id}`;\r\n    let body = {\r\n      completed: !_val\r\n    }\r\n    doApiPost(url, body)\r\n      .then(()=> {\r\n        \r\n        props.todosList();\r\n\r\n      })\r\n\r\n  }\r\n\r\n  const deleteItem = (_itemIndex) => {\r\n    let url = `https://ls-task-todos.herokuapp.com/todos/${props.cardTodo._id}/deleteItem/${props.cardTodo.items[_itemIndex]._id}`;\r\n    doApiPost(url)\r\n      .then(() => {\r\n        \r\n        props.todosList();\r\n\r\n      })\r\n  }\r\n\r\n  const deleteTodoCard = () => {\r\n    let url = `https://ls-task-todos.herokuapp.com/todos/deleteTodo/${props.cardTodo._id}`;\r\n\r\n    doApiPost(url)\r\n      .then(() => {\r\n        props.todosList();\r\n\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-2 \">\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <h1 className=\"display-4 text-center\" >{props.cardTodo.todo_name}</h1>\r\n        <span onClick={deleteTodoCard} className=\"delTodoCard\">X</span>\r\n      </div>\r\n\r\n      <div className=\"d-flex align-items-center justify-content-center inputItem\">\r\n        <input ref={userInput} type=\"text\" className=\"form-control  border border-info \" placeholder=\"I have to...\" />\r\n        <button onClick={addTask} className=\"btn btn-info\">Add</button>\r\n      </div>\r\n      {items.map((val, itemIndex) => {\r\n        return (\r\n          <div key={itemIndex} className=\"d-flex justify-content-between align-items-center p-2 mt-1 items \">\r\n            <div>\r\n              <input id={val.id} type=\"checkbox\" name=\"isDone\" onChange={() => {\r\n                checkedItem(val.completed, itemIndex)\r\n              }} className=\"mr-1\" checked={val.completed} />\r\n              <label htmlFor={val.id}>{val.item_name}</label>\r\n            </div>\r\n            <div>{val.created_at}</div>\r\n            <button onClick={() => { deleteItem(itemIndex) }} className=\"btn btn-secondary text-danger\">X</button>\r\n          </div>)\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoItem\r\n\r\n","\r\nimport React from 'react';\r\nimport \"../css_comps/todos.css\"\r\nimport ToDoItem from './toDoItem';\r\nfunction TodoCard(props) {\r\n    // console.log(\"props.cardTodo->\",props.cardTodo);\r\n    return (\r\n        <div className=\"border-0 mt-4\">\r\n            <div className=\"row p-3  mb-2 list\">\r\n                <ToDoItem key={props.cardTodo._id} indexCard={props.indexCard} cardTodo={props.cardTodo} todosList={props.todosList}></ToDoItem>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoCard\r\n","import React, { useEffect, useState } from 'react';\r\nimport ToDoItem from './toDoItem';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TodoCard from './todoCrad';\r\nimport \"../css_comps/todos.css\"\r\nimport { doApiGet } from '../services/apiService';\r\nfunction ToDoList(props) {\r\n\r\n  let todosList_ar = useSelector((myStore) => myStore.todosList_ar);\r\n  let dTodoList_ar = useDispatch();\r\n\r\n  useEffect(() => {\r\n    todosList();\r\n\r\n  }, [])\r\n\r\n  const todosList = () => {\r\n    // let url = \"http://localhost:3000/todos\";\r\n    let url = \"https://ls-task-todos.herokuapp.com/todos\";\r\n    doApiGet(url)\r\n      .then(data => {\r\n        // console.log(\"data for DB\", data);\r\n       dTodoList_ar({ type: \"updateList\", data: data })\r\n      });\r\n  }\r\n \r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <div className=\"d-flex flex-wrap justify-content-between \" >\r\n        {todosList_ar.map((cardTodo, index) => {\r\n          return (<TodoCard key={cardTodo._id} indexCard={index} cardTodo={cardTodo} todosList={todosList}/>)\r\n        })}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default ToDoList\r\n","\r\nconst initState = {\r\n  todosList_ar: []\r\n}\r\n\r\nexport const toDoReducer = (state = initState, action) => {\r\n if (action.type === \"updateList\") {\r\n    return { ...state, todosList_ar: action.data }\r\n  }\r\n  else {\r\n    return state;\r\n  }\r\n}","import React from 'react';\r\nfunction Header(props) {\r\n    return (\r\n        <header className=\"container-fluid d-flex align-items-end  text-center justify-content-center\">\r\n            <h1 className=\"display-3 \">Todos Notes</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport TodoTitle from './todoTitle';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Nav from './nav';\r\nimport ToDoList from './toDoList';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { toDoReducer } from '../reducer/toDoReducer'\r\nimport Header from './header';\r\nfunction AppTodos(props) {\r\n  const myStore = createStore(toDoReducer);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Provider store={myStore}>\r\n        <Router>\r\n          <Header/>\r\n          <Nav />\r\n          <Route exact path={\"/\"} component={ToDoList} />\r\n          <Route exact path={\"/newTodo/\"} component={TodoTitle} />\r\n        </Router>\r\n      </Provider>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppTodos","import React from 'react';\r\nimport './App.css';\r\nimport AppTodos from './tods_comps/appTodos';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n     <AppTodos/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}